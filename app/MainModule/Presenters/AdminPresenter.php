<?php
declare(strict_types=1);

namespace App\MainModule\Presenters;

use App\Models\Orm\Station\Station;
use App\Models\Orm\Users\User;
use App\Security\Permissions;
use Exception;
use Nette;
use App\Models\MainPresenter;
use App\Models\Orm\LikeFilterFunction;
use Nette\Application\UI\Form;
use Nextras\Datagrid\Datagrid;
use Nextras\Orm\Collection\ICollection;

class AdminPresenter extends MainPresenter
{

    /** @var @persistent */
    public $selectedStationId;

    public function startup()
    {
        parent::startup(); // TODO: Change the autogenerated stub
        if (!$this->isAllowed(Permissions::ADMIN)) {
            $this->redirect(":Main:Homepage:default");
        }
    }

    public function createComponentStationsDataGrid()
    {
        $grid = new Datagrid();


        $grid->addColumn("id", "ID")
            ->enableSort();
        $grid->addColumn("name", $this->translate("all.name"))
            ->enableSort();
        $grid->addColumn("description", $this->translate("all.description"))
            ->enableSort();
        $grid->addColumn("lastUpdate", $this->translate("all.lastUpdate"))
            ->enableSort();
        $grid->addColumn("apiToken", $this->translate("all.apiToken"))
            ->enableSort();
        $grid->addColumn("mode", $this->translate("all.stationMode"))
            ->enableSort();

        $grid->setDataSourceCallback(function ($filter, $order, $paginator) {
            return $this->dataGridFactory->createDataSource("stations", $filter, $order, ["mode"], [], $paginator);

        });

        $grid->setPagination(10, function ($filter, $order) {
            return count($this->dataGridFactory->createDataSource("stations", $filter, $order, ["mode"], []));
        });

        $grid->addCellsTemplate(__DIR__ . '/../../Controls/templateDataGrid.latte');
        $grid->addCellsTemplate(__DIR__ . '/../../Controls/AdminModule/stationsManagerDataGrid.latte');

        $grid->setEditFormFactory(function ($row) {

            $form = new Nette\Forms\Container();

            $form->addText("name")->setHtmlAttribute("class", "form-control");

            $form->addTextArea("description")->setHtmlAttribute("class", "form-control");

            $form->addSelect("mode", null, [
                Station::MODE_NORMAL => $this->translate("all.normalMode"),
                Station::MODE_CHECK_ONLY => $this->translate("all.checkOnlyMode")
            ])->setHtmlAttribute("class", "form-control");


            $form->addSubmit('save', $this->translate("all.save"))->getControlPrototype()->class = 'btn btn-sm btn-success m-1';
            $form["save"]->getControlPrototype()->onClick = "return confirm(\"" . $this->translate("all.reallyStationEdit") . "\");";
            $form->addSubmit('cancel', $this->translate("all.cancel"))->getControlPrototype()->class = 'btn btn-sm btn-danger m-1';

            if ($row) {
                $form->setDefaults($row->toArray());
            }

            return $form;
        });

        $grid->setEditFormCallback(function (Nette\Forms\Container $row) {
            $values = $row->getValues();

            $this->orm->stations->update((int)$values->id, $values);
        });

        $grid->setFilterFormFactory(function () {
            $form = new Nette\Forms\Container();
            $form->addText('id')
                ->addCondition(Form::INTEGER); // your custom input type

            $form->addText('name')
                ->setHtmlAttribute("class", "form-control");

            $form->addText('apiToken')
                ->setHtmlAttribute("class", "form-control");


            $form->addSelect("mode", null, [
                -1 => $this->translate("all.all"),
                Station::MODE_NORMAL => $this->translate("all.normalMode"),
                Station::MODE_CHECK_ONLY => $this->translate("all.checkOnlyMode")
            ])
                ->setHtmlAttribute("class", "form-control");


            // these buttons are not compulsory
            $form->addSubmit('filter', $this->translate("all.filter"))->getControlPrototype()->class = 'btn btn-sm btn-primary m-1';
            $form->addSubmit('cancel', $this->translate("all.cancel"))->getControlPrototype()->class = 'btn btn-sm btn-danger m-1';

            return $form;
        });


        return $grid;
    }

    public function handleNewApiToken($id)
    {
        if ($id == null) {
            return;
        }

        $station = $this->orm->stations->getById($id);

        if (!$station) {
            return;
        }

        $station->apiToken = Nette\Utils\Random::generate(16);
        $this->orm->stations->persistAndFlush($station);
        $this->showSuccessToastAndRefresh();
    }

    public function createComponentUsersDataGrid()
    {
        $grid = new Datagrid();

        $grid->addColumn("id", "ID")
            ->enableSort();
        $grid->addColumn("email", $this->translate("messages.visitor.email"))
            ->enableSort();
        $grid->addColumn("firstName", $this->translate("messages.visitor.firstName"))
            ->enableSort();
        $grid->addColumn("surName", $this->translate("messages.visitor.surName"))
            ->enableSort();
        $grid->addColumn("permission", $this->translate("all.permission"))
            ->enableSort();
        $grid->addColumn("registration", $this->translate("all.registration"))
            ->enableSort();
        $grid->addColumn("registrationDate", $this->translate("all.registrationDate"))
            ->enableSort();
        $grid->addColumn("lastLogin", $this->translate("all.lastLogin"))
            ->enableSort();
        $grid->addColumn("rfid", $this->translate("messages.main.profile.rfid"))
            ->enableSort();
        $grid->addColumn("token", $this->translate("all.apiToken"))
            ->enableSort();

        $grid->setDataSourceCallback(function ($filter, $order) {

            if (isset($filter["registration"]) && $filter["registration"] == -1) {
                unset($filter["registration"]);
            }

            if (isset($filter["permission"]) && $filter["permission"] == -1) {
                unset($filter["permission"]);
            }

            $filters = [ICollection:: AND];
            foreach ($filter as $k => $v) {
                if ($k == 'id' || is_array($v) || is_numeric($v)) {
                    $filters[$k] = $v;
                } else {
                    array_push($filters, [LikeFilterFunction::class, $k, $v]);
                }
            }

            if (isset($order[0])) {
                $data = $this->orm->users->findBy($filters)->orderBy($order[0], $order[1])->fetchAll();
            } else {
                $data = $this->orm->users->findBy($filters)->fetchAll();
            }

            return $data;

        });

        $grid->addCellsTemplate(__DIR__ . '/../../Controls/usersManagerDataGrid.latte');

        $grid->setEditFormFactory(function ($row) {

            $form = new Nette\Forms\Container();

            $form->addText("email")->setHtmlAttribute("class", "form-control");

            $form->addText("firstName")->setHtmlAttribute("class", "form-control");

            $form->addText("surName")->setHtmlAttribute("class", "form-control");

            $form->addText("rfid")->setHtmlAttribute("class", "form-control");

            $form->addSelect("permission", null, [
                Permissions::REGISTERED => $this->translate("messages.main.roles.registered"),
                Permissions::MANAGER => $this->translate("messages.main.roles.manager"),
                Permissions::ADMIN => $this->translate("messages.main.roles.admin")
            ])->setHtmlAttribute("class", "form-control");

            $form->addSelect("registration", null, [
                0 => $this->translate("messages.main.global.noB"),
                1 => $this->translate("messages.main.global.yesB")
            ])->setHtmlAttribute("class", "form-control");


            $form->addSubmit('save', $this->translate("all.save"))->getControlPrototype()->class = 'btn btn-sm btn-success m-1';
            $form->addSubmit('cancel', $this->translate("all.cancel"))->getControlPrototype()->class = 'btn btn-sm btn-danger m-1';

            if ($row) {
                $form->setDefaults($row->toArray());
            }

            return $form;
        });

        $grid->setEditFormCallback(function (Nette\Forms\Container $row) {
            $values = $row->getValues();
            $this->orm->users->update((int)$values->id, $values);
        });

        $grid->setFilterFormFactory(function () {
            $form = new Nette\Forms\Container();
            $form->addText('id')
                ->setHtmlAttribute("class", "form-control")
                ->addCondition(Form::INTEGER);

            $form->addText("email")->setHtmlAttribute("class", "form-control");

            $form->addText("firstName")->setHtmlAttribute("class", "form-control");

            $form->addText("surName")->setHtmlAttribute("class", "form-control");

            $form->addText("token")->setHtmlAttribute("class", "form-control");

            $form->addText("rfid")->setHtmlAttribute("class", "form-control");

            $form->addSelect("permission", null, [
                -1 => $this->translate("all.all"),
                Permissions::REGISTERED => $this->translate("messages.main.roles.registered"),
                Permissions::MANAGER => $this->translate("messages.main.roles.manager"),
                Permissions::ADMIN => $this->translate("messages.main.roles.admin")
            ])->setHtmlAttribute("class", "form-control");

            $form->addSelect("registration", null, [
                -1 => $this->translate("all.all"),
                0 => $this->translate("messages.main.global.noB"),
                1 => $this->translate("messages.main.global.yesB")
            ])->setHtmlAttribute("class", "form-control");

            $form->addSubmit('filter', $this->translate("all.filter"))->getControlPrototype()->class = 'btn btn-sm btn-primary m-1';
            $form->addSubmit('cancel', $this->translate("all.cancel"))->getControlPrototype()->class = 'btn btn-sm btn-danger m-1';

            return $form;
        });


        return $grid;
    }

    public function handleNewUserApiToken($id)
    {
        try {
            $this->orm->users->newToken($id);
            $this->showSuccessToastAndRefresh();
        } catch (Exception $e) {
            $this->showDangerToastAndRefresh();
        }

    }

    public function renderStationsManager()
    {
        unset($this->selectedStationId);
    }

    public function renderStationPermsManager($idStation)
    {
        if ($idStation == null & $this->selectedStationId == null) {
            $this->redirect("Admin:stationsManager");
        }

        if ($idStation != null || $this->selectedStationId == null) {
            $this->selectedStationId = $idStation;
        }

        $this->template->selectedStation = $this->orm->stations->getById($idStation);
    }

    public function createComponentNewRfidDataGrid()
    {
        $grid = new Datagrid();

        $grid->addColumn("id", "ID")
            ->enableSort();
        $grid->addColumn("rfid", $this->translate("messages.main.profile.rfid"))
            ->enableSort();
        $grid->addColumn("createdAt", $this->translate("all.createdAt"))
            ->enableSort();

        $grid->setDataSourceCallback(function ($filter, $order) {
            return $this->dataGridFactory->createDataSource("newRfids", $filter, $order);
        });

        $grid->addCellsTemplate(__DIR__ . '/../../Controls/AdminModule/newRfidDataGrid.latte');


        return $grid;

    }

    public function handleDeleteNewRfid($id)
    {
        try {
            $this->orm->newRfids->delete($id);
            $this->showSuccessToastAndRefresh();
        } catch (Exception $e) {
            $this->showSuccessToastAndRefresh();
        }

    }

    public function createComponentAccessLogDataGrid()
    {
        $grid = new Datagrid();

        $grid->addColumn("id", "ID")
            ->enableSort();
        $grid->addColumn("datetime", $this->translate("all.datetime"))
            ->enableSort();
        $grid->addColumn("rfid", $this->translate("messages.main.profile.rfid"))
            ->enableSort();
        $grid->addColumn("status", $this->translate("all.status"))
            ->enableSort();
        $grid->addColumn("idUser", $this->translate("all.user"))
            ->enableSort();
        $grid->addColumn("idStation", $this->translate("all.stationName"))
            ->enableSort();

        $grid->setDataSourceCallback(function ($filter, $order, $paginator) {
            if (empty($order[1])) {
                $order[0] = "id";
                $order[1] = "DESC";
            }
            return $this->dataGridFactory->createDataSource("logs", $filter, $order, [], [], $paginator);
        });

        $grid->setPagination(10, function ($filter, $order) {
            return count($this->dataGridFactory->createDataSource("logs", $filter, $order, [], []));
        });


        $grid->addCellsTemplate(__DIR__ . '/../../Controls/AdminModule/accessLogDataGrid.latte');


        return $grid;

    }

}