<?php

declare(strict_types=1);

namespace App\VisitorModule\Presenters;

use Nette;
use App\Models\BasePresenter;
use App\Controls;
use Nette\Mail\Message;
use Nette\Mail\SendmailMailer;
use App;

class RegisterPresenter extends BasePresenter
{

    /** @var App\Models\EmailService @inject */
    public $emailService;

    private $database;

    public function __construct(Nette\Database\Context $database)
    {
        $this->database=$database;
    }

    public function startup()
    {
        parent::startup(); // TODO: Change the autogenerated stub
    }

    public function createComponentRegisterForm()
    {

        $form = new Nette\Application\UI\Form();

        $form->addText('email', '')
            ->setHtmlAttribute("class", "form-control")
            ->setHtmlAttribute("placeholder", $this->translator->translate("messages.visitor.email"))
            ->setRequired($this->translator->translate("messages.visitor.emailMissing"))
            ->addRule(\Nette\Application\UI\Form::EMAIL, $this->translate("messages.visitor.emailMissing"));

        $form->addPassword('password', '')
            ->setHtmlAttribute("class", "form-control")
            ->setHtmlAttribute("placeholder", $this->translator->translate("messages.visitor.password"))
            ->setRequired($this->translator->translate("messages.visitor.passwordMissing"));

        $form->addPassword('passwordCheck', '')
            ->setHtmlAttribute("class", "form-control")
            ->setHtmlAttribute("placeholder", $this->translator->translate("messages.visitor.passwordCheck"))
            ->setRequired($this->translator->translate("messages.visitor.passwordMissing"));

        $form->addText('firstName', '')
            ->setHtmlAttribute("class", "form-control")
            ->setHtmlAttribute("placeholder", $this->translator->translate("messages.visitor.firstName"))
            ->setRequired($this->translator->translate("messages.visitor.missing"));

        $form->addText('surName', '')
            ->setHtmlAttribute("class", "form-control")
            ->setHtmlAttribute("placeholder", $this->translator->translate("messages.visitor.surName"))
            ->setRequired($this->translator->translate("messages.visitor.missing"));

        $form->addSubmit('register', $this->translator->translate("messages.visitor.registerBtn"))
            ->setHtmlAttribute("class","btn btn-primary btn-block");

        $form->onSuccess[] = [$this, 'registerFormSucceeded'];

        return $form;
    }


    public function registerFormSucceeded(Nette\Application\UI\Form $form)
    {
        $values = $form->getValues();
        if($values->password != $values->passwordCheck)
        {
            $this->alertState = "Danger";
            $this->alertText = $this->translate("messages.visitor.passwordMatchError");
            if ($this->isAjax()) {
                $this->redrawControl("formS");
            }else{
                $this->redirect("this");
            }
            return;
        }

        if($this->database->table("users")->where("email",$values->email)->fetch()!=null)
        {
            $this->alertState = "Danger";
            $this->alertText = $this->translate("messages.visitor.emailExistReg");
            if ($this->isAjax()) {
                $this->redrawControl("formS");
            }else{
                $this->redirect("this");
            }
            return;
        }

        $this->database->table("users")->insert([
            "firstName" => $values->firstName,
            "email" => $values->email,
            "surName" => $values->surName,
            "registration" => 0,
            "registrationDate" => new Nette\Utils\DateTime(),
            "password" => password_hash($values->password,PASSWORD_BCRYPT)
        ]);

        $this->emailService->sendEmail($values->email,
            "Potvrzení registrace",
            "Dobrý den,\nVaše registrace byla přijata ke schválení.\nJakmile bude schválena, budeme Vás informovat emailem.\n\nDocházkový systém");

        $this->payload->allowAjax = FALSE;
        $this->redirect(":Visitor:Login:",["alertState"=>"Success","alertText"=>$this->translate("messages.visitor.regSuc")]);

    }

}